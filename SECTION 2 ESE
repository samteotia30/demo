{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP9dnfcXumtPAy8TiBHNED0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/samteotia30/demo/blob/main/SECTION%202%20ESE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_3cbELCBQZDk"
      },
      "outputs": [],
      "source": [
        "#Samiksha Teotia\n",
        "#Section:-C\n",
        "\n",
        "Section-2\n",
        "Q. 2\tTitle: \"Analyzing Content Creators: Uncovering Patterns for Success\"\n",
        "The Scenario:\n",
        "A data analyst has been tasked with studying the performance of content creators on a popular video-sharing platform. The dataset includes several key performance indicators, such as rankings, subscribers, uploads, views, and country of origin. The analyst is interested in identifying patterns and relationships between uploads, views, and subscribers to determine factors that contribute to creator success. The analyst seeks your assistance to explore the data and identify key insights.\n",
        "Tasks:\n",
        "1.Descriptive Analysis:\n",
        "oCalculate the average views per upload for each content creator.\n",
        "oIdentify the creator with the highest views per upload.\n",
        "2.Trend Analysis:\n",
        "oAnalyze if there is a linear relationship between uploads and views. Discuss whether this relationship holds true for all creators.\n",
        "3.Probability Analysis:\n",
        "oUsing the dataset, calculate the probability of randomly selecting a creator with more than 500 uploads if the dataset were expanded to 50 entries with the same proportions.\n",
        "4.Country Impact:\n",
        "oAnalyze how the country of origin might influence the success metrics of the creators (e.g., subscribers, views, and uploads).\n",
        "5.Recommendations:\n",
        "oBased on the findings, provide 3 recommendations for improving content creators' performance. These could include suggestions regarding uploads, engagement, or targeting specific demographics.\n",
        "Deliverables:\n",
        "Insights on patterns in the data\n",
        "Visualizations that showcase the relationship between key metrics\n",
        "Actionable recommendations to help creators improve performance and increase views\t5\t2\t3/CP\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "6TRBSzOCROLD"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/Section 2 Q2.csv\")  # Replace with your dataset path"
      ],
      "metadata": {
        "id": "N19ccT72ROYA"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "df.isnull().sum()\n",
        "\n",
        "# Handle missing values (e.g., fill with mean/median or drop rows/columns)\n",
        "# Example: df['views'].fillna(df['views'].mean(), inplace=True)\n",
        "\n",
        "# Check for and correct data type issues\n",
        "# ..."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "h7UP4csKRvaI",
        "outputId": "b30d47d5-bb3b-40a5-d683-46ea8ea1c534"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ranking        0\n",
              "Username       0\n",
              "Subscribers    0\n",
              "Uploads        0\n",
              "Views          0\n",
              "Country        6\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Ranking</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Username</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Subscribers</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Uploads</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Views</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'Views' and 'Uploads' columns to numeric type\n",
        "df['Views'] = pd.to_numeric(df['Views'], errors='coerce')\n",
        "df['Uploads'] = pd.to_numeric(df['Uploads'], errors='coerce')\n",
        "\n",
        "# Now you can calculate views per upload\n",
        "df['views_per_upload'] = df['Views'] / df['Uploads']"
      ],
      "metadata": {
        "id": "nlCPbtHxSUsq"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Scatter plot to visualize the relationship\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x='Uploads', y='Views', data=df)  # Changed 'uploads' to 'Uploads'\n",
        "plt.title('Relationship between Uploads and Views')\n",
        "plt.xlabel('Uploads')\n",
        "plt.ylabel('Views')\n",
        "plt.show()\n",
        "\n",
        "# Calculate correlation coefficient\n",
        "correlation = df['Uploads'].corr(df['Views'])  # Changed 'uploads' to 'Uploads'\n",
        "print(f\"Correlation: {correlation}\")\n",
        "\n",
        "# You might need to segment creators based on factors\n",
        "# like content type or audience to see if the linear\n",
        "# relationship holds true for different groups."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616
        },
        "id": "CrLWzZQLSdRS",
        "outputId": "b20603ad-6b11-455e-9d87-139c906e29c1"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: nan\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py:2897: RuntimeWarning: invalid value encountered in divide\n",
            "  c /= stddev[:, None]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming the proportion of creators with 500+ uploads remains the same\n",
        "num_creators_500_uploads = len(df[df['Uploads'] > 500]) # Changed 'uploads' to 'Uploads'\n",
        "probability = num_creators_500_uploads / len(df)\n",
        "\n",
        "# Probability for expanded dataset (50 entries)\n",
        "probability_expanded = probability * 50\n",
        "\n",
        "print(f\"Probability: {probability_expanded}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "SKWRFIiASnTG",
        "outputId": "b580e323-dfae-4954-ac91-8bb3fbcee35c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Probability: 7.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_to_numeric(value):\n",
        "    \"\"\"Converts values with 'M' (million) to numeric.\"\"\"\n",
        "    if isinstance(value, str) and 'M' in value:\n",
        "        return float(value.replace('M', '')) * 1000000  # Replace 'M' with '' and multiply by 1 million\n",
        "    try:\n",
        "        return float(value)  # Convert to float if possible\n",
        "    except (TypeError, ValueError):\n",
        "        return np.nan  # Return NaN if conversion fails\n",
        "# Apply the function to relevant columns\n",
        "for column in ['Subscribers', 'Views', 'Uploads']:\n",
        "    df[column] = df[column].apply(convert_to_numeric)\n",
        "# Group data by country and calculate metrics\n",
        "# Make sure 'country' matches the exact column name in your DataFrame\n",
        "# If the column name is different (e.g., 'Country'), replace 'country' below\n",
        "# Original line: country_metrics = df.groupby(df['Country'].str.strip())[['subscribers', 'views', 'uploads']].mean()\n",
        "# Changed to use actual column names from the DataFrame:\n",
        "country_metrics = df.groupby(df['Country'].str.strip())[['Subscribers', 'Views', 'Uploads']].mean()\n",
        "# Visualize country-wise differences (e.g., using bar plots)\n",
        "country_metrics.plot(kind='bar', figsize=(10, 6))\n",
        "plt.title('Country-wise Metrics')\n",
        "plt.xlabel('Country')\n",
        "plt.ylabel('Average Value')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 572
        },
        "id": "a2dELnxJTK3k",
        "outputId": "0d40211a-64a3-47ea-a733-4c6768e22f44"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q. 3\tTitle: \"Global Water Access: Analyzing the Trends in Safe Drinking Water Usage\"\n",
        "The Scenario:\n",
        "The United Nations has been monitoring global access to safely managed drinking water services as part of its Sustainable Development Goals (SDGs). The data analyst has received a dataset tracking the usage of safely managed drinking water services across various countries over several years. The dataset includes the columns: Country, Year, and Usage of Safely Managed Drinking Water Services.\n",
        "The analyst is tasked with identifying global trends, regional differences, and potential factors affecting access to safe drinking water. The data spans multiple years, allowing for the identification of significant changes over time.\n",
        "The analyst needs your expertise in analyzing this data and drawing insights that could inform policy recommendations.\n",
        "Tasks:\n",
        "1.Descriptive Analysis:\n",
        "oCalculate the average usage of safely managed drinking water services for each country in 2020 and 2015.\n",
        "oIdentify the country with the highest and lowest usage of safely managed drinking water services in 2020.\n",
        "2.Trend Analysis:\n",
        "oAnalyze the change in access to safely managed drinking water services for each country from 2015 to 2020. Which country shows the most improvement? Which country has seen the least improvement, or perhaps a decline?\n",
        "3.Global Comparison:\n",
        "oCompare the average global usage of safely managed drinking water services in 2015 and 2020. Has there been an overall improvement in global access to safe drinking water?\n",
        "4.Regional Differences:\n",
        "oBased on the data, discuss regional trends. Which countries are leading the way in improving access to safe drinking water, and which are lagging? What could be the possible reasons behind these regional differences?\n",
        "5.Recommendations:\n",
        "oBased on the analysis, provide 3 recommendations for improving access to safely managed drinking water services in countries with lower usage rates. These could include policy suggestions, targeted interventions, or technological innovations.\n",
        "Deliverables:\n",
        "Insights from descriptive and trend analysis\n",
        "Visualizations showcasing the changes in safe drinking water access across countries\n",
        "Actionable recommendations for improving global water access and achieving SDG targets\t7\t2\t3/CP"
      ],
      "metadata": {
        "id": "RdHFDqM0Qmtm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming your data is in a CSV file named 'water_access.csv'\n",
        "water_data = pd.read_csv('/content/Section 2 Q3.csv')\n",
        "\n",
        "# Print the actual column names to check for typos or missing columns\n",
        "print(water_data.columns)\n",
        "\n",
        "# Calculate average usage for each country in 2020 and 2015\n",
        "# Replace 'Usage of Safely Managed Drinking Water Services' with the correct column name from the output above\n",
        "# Example: If the column name is 'Usage', change the line below to:\n",
        "# usage_2020 = water_data[water_data['Year'] == 2020].groupby('Country')['Usage'].mean()\n",
        "\n",
        "# Get the actual column name from water_data.columns\n",
        "usage_column_name = water_data.columns[2]  # Assuming 'Usage...' is the 3rd column\n",
        "\n",
        "usage_2020 = water_data[water_data['Year'] == 2020].groupby('Country')[usage_column_name].mean()\n",
        "usage_2015 = water_data[water_data['Year'] == 2015].groupby('Country')[usage_column_name].mean()\n",
        "\n",
        "# Identify countries with highest and lowest usage in 2020\n",
        "highest_usage_country = usage_2020.idxmax()\n",
        "lowest_usage_country = usage_2020.idxmin()\n",
        "\n",
        "print(\"Average Usage in 2020:\\n\", usage_2020)\n",
        "print(\"\\nAverage Usage in 2015:\\n\", usage_2015)\n",
        "print(\"\\nCountry with Highest Usage in 2020:\", highest_usage_country)\n",
        "print(\"\\nCountry with Lowest Usage in 2020:\", lowest_usage_country)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "V1oICrRlT717",
        "outputId": "0ed2deaf-40ae-4487-cc47-4da4b76e37d7"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Country', 'Year', 'Usage of safely managed drinking water services'], dtype='object')\n",
            "Average Usage in 2020:\n",
            " Country\n",
            "Afghanistan              28.402506\n",
            "Africa (WHO)             32.337890\n",
            "Albania                  70.674540\n",
            "Algeria                  72.248146\n",
            "American Samoa           89.854546\n",
            "                           ...    \n",
            "Western Pacific (WHO)          NaN\n",
            "World                    72.253630\n",
            "Yemen                          NaN\n",
            "Zambia                         NaN\n",
            "Zimbabwe                 26.573847\n",
            "Name: Usage of safely managed drinking water services, Length: 243, dtype: float64\n",
            "\n",
            "Average Usage in 2015:\n",
            " Country\n",
            "Afghanistan              23.853590\n",
            "Africa (WHO)             28.694380\n",
            "Albania                  70.591970\n",
            "Algeria                  76.971960\n",
            "American Samoa           89.395200\n",
            "                           ...    \n",
            "Western Pacific (WHO)          NaN\n",
            "World                    69.058400\n",
            "Yemen                          NaN\n",
            "Zambia                         NaN\n",
            "Zimbabwe                 27.256817\n",
            "Name: Usage of safely managed drinking water services, Length: 254, dtype: float64\n",
            "\n",
            "Country with Highest Usage in 2020: Gibraltar\n",
            "\n",
            "Country with Lowest Usage in 2020: Chad\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate change in usage from 2015 to 2020\n",
        "usage_change = usage_2020 - usage_2015\n",
        "\n",
        "# Identify countries with most and least improvement\n",
        "most_improved_country = usage_change.idxmax()\n",
        "least_improved_country = usage_change.idxmin()\n",
        "\n",
        "print(\"\\nChange in Usage from 2015 to 2020:\\n\", usage_change)\n",
        "print(\"\\nMost Improved Country:\", most_improved_country)\n",
        "print(\"\\nLeast Improved Country:\", least_improved_country)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "M0cN_i3JTleN",
        "outputId": "b2dda533-577a-4342-e90a-29dbf14f0313"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Change in Usage from 2015 to 2020:\n",
            " Country\n",
            "Afghanistan              4.548916\n",
            "Africa (WHO)             3.643510\n",
            "Albania                  0.082570\n",
            "Algeria                 -4.723814\n",
            "American Samoa           0.459346\n",
            "                           ...   \n",
            "Western Pacific (WHO)         NaN\n",
            "World                    3.195230\n",
            "Yemen                         NaN\n",
            "Zambia                        NaN\n",
            "Zimbabwe                -0.682970\n",
            "Name: Usage of safely managed drinking water services, Length: 254, dtype: float64\n",
            "\n",
            "Most Improved Country: Bhutan\n",
            "\n",
            "Least Improved Country: Nepal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "global_usage_2020 = water_data[water_data['Year'] == 2020]['Usage of Safely Managed Drinking Water Services'].mean()\n",
        "global_usage_2015 = water_data[water_data['Year'] == 2015]['Usage of Safely Managed Drinking Water Services'].mean()\n",
        "\n",
        "print(\"\\nGlobal Average Usage in 2020:\", global_usage_2020)\n",
        "print(\"\\nGlobal Average Usage in 2015:\", global_usage_2015)\n",
        "\n",
        "if global_usage_2020 > global_usage_2015:\n",
        "    print(\"\\nThere has been an overall improvement in global access to safe drinking water.\")\n",
        "else:\n",
        "    print(\"\\nThere has been a decline in global access to safe drinking water.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "e-rhjtqmTnjR",
        "outputId": "d77babf6-4726-4f0c-f71b-554ee5a25f9d"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'Usage of Safely Managed Drinking Water Services'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'Usage of Safely Managed Drinking Water Services'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-1f3d75f6d5c7>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mglobal_usage_2020\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwater_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mwater_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Year'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2020\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Usage of Safely Managed Drinking Water Services'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mglobal_usage_2015\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwater_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mwater_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Year'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2015\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Usage of Safely Managed Drinking Water Services'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nGlobal Average Usage in 2020:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobal_usage_2020\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nGlobal Average Usage in 2015:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobal_usage_2015\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'Usage of Safely Managed Drinking Water Services'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming your data is in a CSV file named 'water_access.csv'\n",
        "water_data = pd.read_csv('/content/Section 2 Q3.csv')\n",
        "\n",
        "# Print the actual column names to check for typos or missing columns\n",
        "print(water_data.columns)\n",
        "\n",
        "# Calculate average usage for each country in 2020 and 2015\n",
        "# Replace 'Usage of Safely Managed Drinking Water Services' with the correct column name from the output above\n",
        "# Example: If the column name is 'Usage', change the line below to:\n",
        "# usage_2020 = water_data[water_data['Year'] == 2020].groupby('Country')['Usage'].mean()\n",
        "\n",
        "# Get the actual column name from water_data.columns\n",
        "usage_column_name = water_data.columns[2]  # Assuming 'Usage...' is the 3rd column\n",
        "\n",
        "# Use the usage_column_name variable to access the correct column\n",
        "global_usage_2020 = water_data[water_data['Year'] == 2020][usage_column_name].mean()\n",
        "global_usage_2015 = water_data[water_data['Year'] == 2015][usage_column_name].mean()\n",
        "\n",
        "print(\"\\nGlobal Average Usage in 2020:\", global_usage_2020)\n",
        "print(\"\\nGlobal Average Usage in 2015:\", global_usage_2015)\n",
        "\n",
        "if global_usage_2020 > global_usage_2015:\n",
        "    print(\"\\nThere has been an overall improvement in global access to safe drinking water.\")\n",
        "else:\n",
        "    print(\"\\nThere has been a decline in global access to safe drinking water.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "0jryOeZdUOsk",
        "outputId": "fa609ccf-650a-443c-ebd6-1d0a914a372c"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Country', 'Year', 'Usage of safely managed drinking water services'], dtype='object')\n",
            "\n",
            "Global Average Usage in 2020: 72.05529671084336\n",
            "\n",
            "Global Average Usage in 2015: 70.96148664371259\n",
            "\n",
            "There has been an overall improvement in global access to safe drinking water.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming your data is in a CSV file named 'water_access.csv'\n",
        "water_data = pd.read_csv('/content/Section 2 Q3.csv')\n",
        "\n",
        "# Print the actual column names to check for typos or missing columns\n",
        "print(water_data.columns)\n",
        "\n",
        "# Check if 'Region' column exists. If not, handle it appropriately (e.g., create it)\n",
        "if 'Region' not in water_data.columns:\n",
        "    # If 'Region' column doesn't exist, we'll add a placeholder for now\n",
        "    # You should replace this with logic to determine the region from 'Country' or other data\n",
        "    print(\"Warning: 'Region' column not found. Adding a placeholder column.\")\n",
        "    water_data['Region'] = 'Unknown'  # Replace 'Unknown' with appropriate logic\n",
        "\n",
        "# Get the actual column name from water_data.columns\n",
        "# Assuming 'Usage...' is the 3rd column\n",
        "# Note: This is based on the previous code where you used water_data.columns[2]\n",
        "usage_column_name = water_data.columns[2]\n",
        "\n",
        "# Use the usage_column_name variable to access the correct column\n",
        "regional_usage = water_data.groupby(['Region', 'Year'])[usage_column_name].mean().unstack()\n",
        "\n",
        "# Visualize regional trends (e.g., using a line plot)\n",
        "regional_usage.plot(kind='line', figsize=(10, 6))\n",
        "plt.title('Regional Trends in Safe Drinking Water Access')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Usage')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "FPI1SyTnUzny",
        "outputId": "3499ec10-9ac9-4ad6-b747-804226fa9110"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Country', 'Year', 'Usage of safely managed drinking water services'], dtype='object')\n",
            "Warning: 'Region' column not found. Adding a placeholder column.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0oAAAIsCAYAAADMAFkeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACWWUlEQVR4nOzde1yUZf7/8ddwRoExyAHLEx2FdFdDWxBDLYVtsZYVs+2gopbljphYrlluB9siXVutNjXT0C3JQvPYapEHTAUtysxKykKpECSNIQ+c798ffZlfA2oMgUP2fj4e83jsXPfnvq7PNROsH677vm6TYRgGIiIiIiIiYufm6gRERERERERaGxVKIiIiIiIi9ahQEhERERERqUeFkoiIiIiISD0qlEREREREROpRoSQiIiIiIlKPCiUREREREZF6VCiJiIiIiIjUo0JJRERERESkHhVKInJODRgwgAEDBrg6DQCWLFmCyWTi4MGDrk7lF0tKSqJr167N0pfJZOLRRx9tlr5ayvHjx7nzzjsJCQnBZDIxadIkV6fUQNeuXUlKSmryuUOGDPnZuF/DdyUi8mulQknkN6auOKh7eXh4cPHFF5OUlMS3337r6vRalYMHDzp8Vmd7nQ/FVktat24d/fv3x2Kx0KZNGy655BKGDx/Oxo0bm9Tfk08+yZIlSxg/fjwvv/wyI0aM+MU5JiUlOXynfn5+XHLJJQwbNoyVK1dSW1v7i8c4Hxw5cgSTycS9997b4Ni9996LyWTikUceaXBs5MiReHp6cvLkyUaP9b///c+lheDw4cMxmUxMnTrVZTmIiOt4uDoBEXGNGTNmEBoaSnl5OTk5OSxZsoTt27ezb98+fHx8Wmzct99+u8X6bm7t27fn5Zdfdmh7+umn+eabb5gzZ06D2PPFqVOn8PBovv97mD17NlOmTKF///5MmzaNNm3acODAAd555x2WL1/OH//4R6f73Lx5M5GRkaf9B/kv4e3tzaJFi4AfP4dDhw6xbt06hg0bxoABA1izZg0BAQGN6isvLw83t5b9e2Rzf1eNYbFYuPzyy9m+fXuDYzt27MDDw4MdO3ac9livXr1o06ZNo8f63//+x/PPP++SYqmsrIx169bRtWtXXn31VZ566ilMJtM5z0NEXEeFkshv1A033EDv3r0BuPPOO7nwwguZOXMma9euZfjw4S02rpeXV4v13dzatm3LHXfc4dC2fPlyvv/++wbtP2UYBuXl5fj6+rZ0ii2iOQvl6upqHn/8cQYPHnzaIvnIkSNN6vfIkSOEh4f/0vQa8PDwaPDd/vOf/+Spp55i2rRp3HXXXbz22mtnPP+n3723t3ez51dfS/5R42z69evHf//7X44fP46fnx8AJ06c4KOPPmL48OGsXbuWmpoa3N3dATh8+DBfffUVf/7zn12S70819udz5cqV1NTU8NJLL3Hdddexbds2+vfvf46yFJHWQJfeiQgA1157LQBffvmlQ/v+/fsZNmwYgYGB+Pj40Lt3b9auXdvg/L1799K/f398fX3p2LEj//znP0lLS2twWdrp7lE6cuQIY8eOJTg4GB8fH37/+9+zdOlSh5i6y+Bmz57NwoULufTSS/H29qZPnz689957DXJJSkrikksuwcfHh5CQEMaMGcPRo0d/wSd0ZnX3k7z11lv07t0bX19fXnjhBQBKS0uZNGkSnTp1wtvbm8suu4yZM2c6XMblzNwAVq9eTffu3fHx8aF79+6sWrXqtHktX76ciIgI/P39CQgIoEePHjzzzDM/O5/69708+uijmEwmDhw4QFJSEu3atcNsNjN69OifvYzqu+++o6ysjOjo6NMet1gs9v9dWVnJww8/TEREBGazmbZt23LttdeyZcsWe8zWrVsxmUzk5+fz5ptvNrj0saKigkceeYTLLrsMb29vOnXqxN///ncqKip+dt5n88ADDxAbG0tGRgaff/65vf1s3339e5TqLnvdsWMHkydPpn379rRt25a//OUvlJSU/GwOS5cuxcPDgylTptjbfsl3derUKSZOnMiFF16Iv78/N910E99++22j7nvq168fNTU15OTk2Nt27dpFdXU1999/P8ePH2fPnj32Y3UrTP369QPg3Xff5eabb6Zz58727yklJYVTp07Zz0lKSuL555+3z7PuVae2tpa5c+dy1VVX4ePjQ3BwMHfffTfff/+9Q65n+47OZtmyZQwePJiBAwcSFhbGsmXLThu3f/9+hg8fTvv27fH19eXKK6/koYcecoj59ttvGTt2LBdddBHe3t6EhoYyfvx4Kisr7TGN+V0BP/9zXVVVxWOPPcbll1+Oj48PQUFB9OvXj8zMzJ+ds4g40oqSiADY/6F5wQUX2Ns++eQToqOjufjii3nggQdo27Ytr7/+OgkJCaxcuZK//OUvwI//CBg4cCAmk4lp06bRtm1bFi1a1Ki/qJ86dYoBAwZw4MABJkyYQGhoKBkZGSQlJVFaWtrgPoj09HR++OEH7r77bkwmE7NmzWLo0KF89dVXeHp6ApCZmclXX33F6NGjCQkJ4ZNPPmHhwoV88skn5OTktMjlM3l5edx6663cfffd3HXXXVx55ZWcPHmS/v378+2333L33XfTuXNndu7cybRp0zh8+DBz5851em5vv/02iYmJhIeHk5qaytGjRxk9ejQdO3Z06CszM5Nbb72V66+/npkzZwLw2WefsWPHjtPeW9IYw4cPJzQ0lNTUVD744AMWLVqExWKx9386FosFX19f1q1bR3JyMoGBgWeMLSsrY9GiRdx6663cdddd/PDDDyxevJi4uDh2795Nz549CQsL4+WXXyYlJYWOHTty3333AT9e+lhbW8tNN93E9u3bGTduHGFhYXz88cfMmTOHzz//nNWrVzdp3nVGjBjB22+/TWZmJldccYW9/XTf/dkkJydzwQUX8Mgjj3Dw4EHmzp3LhAkTzrpStXDhQu655x4efPBB/vnPf/5sro35rpKSknj99dcZMWIEkZGRZGVlER8f34hP4v8XPNu3b2fQoEHAj8XQFVdcQa9evejYsSM7duwgIiLCfuyn52VkZHDy5EnGjx9PUFAQu3fv5rnnnuObb74hIyMDgLvvvpvCwkIyMzMbXAJbd3zJkiWMHj2aiRMnkp+fz3/+8x8+/PBDduzYYf+ZAee/o8LCQrZs2WL/g82tt97KnDlz+M9//uOwKr53716uvfZaPD09GTduHF27duXLL79k3bp1PPHEE/a+rrnmGkpLSxk3bhzdunXj22+/ZcWKFZw8eRIvL69G/65ozM/1o48+SmpqKnfeeSfXXHMNZWVlvP/++3zwwQcMHjy4Ud+viPwfQ0R+U9LS0gzAeOedd4ySkhLj66+/NlasWGG0b9/e8Pb2Nr7++mt77PXXX2/06NHDKC8vt7fV1tYaffv2NS6//HJ7W3JysmEymYwPP/zQ3nb06FEjMDDQAIz8/Hx7e//+/Y3+/fvb38+dO9cAjFdeecXeVllZaURFRRl+fn5GWVmZYRiGkZ+fbwBGUFCQcezYMXvsmjVrDMBYt26dve3kyZMN5v3qq68agLFt27YGn8VP8/s58fHxRpcuXRzaunTpYgDGxo0bHdoff/xxo23btsbnn3/u0P7AAw8Y7u7uRkFBgdNz69mzp9GhQwejtLTU3vb2228bgENe9957rxEQEGBUV1c3em51AOORRx6xv3/kkUcMwBgzZoxD3F/+8hcjKCjoZ/t7+OGHDcBo27atccMNNxhPPPGEkZub2yCuurraqKiocGj7/vvvjeDg4AZjd+nSxYiPj3doe/nllw03Nzfj3XffdWhfsGCBARg7duw4a56jRo0y2rZte8bjH374oQEYKSkpDnmc7ruvOzZq1Cj7+7r/3gYNGmTU1tba21NSUgx3d3eH7/Sn83vmmWcMk8lkPP744w3GaOp3lZubawDGpEmTHOKSkpIa9HkmFovFuP766+3v4+LijNGjRxuGYRjDhw83br75Zvux3r17O/zOON3PaGpqqmEymYxDhw7Z26xWq3G6f6q8++67BmAsW7bMoX3jxo0N2s/2HZ3J7NmzDV9fX/vvn88//9wAjFWrVjnExcTEGP7+/g45G4bh8P2OHDnScHNzM957770G49TFNfZ3RWN+rn//+983+NkQkabRpXciv1GDBg2iffv2dOrUiWHDhtG2bVvWrl1rX5k4duwYmzdvZvjw4fzwww989913fPfddxw9epS4uDi++OIL+y55GzduJCoqip49e9r7DwwM5Pbbb//ZPP73v/8REhLCrbfeam/z9PRk4sSJHD9+nKysLIf4W265xWHVq+6Swa+++sre9tN7D8rLy/nuu++IjIwE4IMPPmjsR+SU0NBQ4uLiHNoyMjK49tprueCCC+yf33fffcegQYOoqalh27ZtDvE/N7fDhw+zZ88eRo0ahdlstscNHjy4wf067dq148SJE816uc0999zj8P7aa6/l6NGjlJWVnfW8xx57jPT0dHr16sVbb73FQw89REREBFdffTWfffaZPc7d3d3+1/ra2lqOHTtGdXU1vXv3btT3lpGRQVhYGN26dXP4vK+77joAh0v4mqLuXpwffvjBof103/3ZjBs3zmFV89prr6WmpoZDhw41iJ01axb33nsvM2fOZPr06Y0e4+e+q7rdBv/2t785xCUnJzd6jOjoaHbt2kVNTQ21tbXk5OTQt29f+7G6VaSTJ0+yZ88e+2oSOP6Mnjhxgu+++46+fftiGAYffvjhz46dkZGB2Wxm8ODBDt91REQEfn5+Db5rZ7+jZcuW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O3bWv+6PGzeOF154gaSkJHJzc+natSsrVqxgx44dzJ07t8H9ID8nICCAmJgYZs2aRVVVFRdffDFvv/22/fKfc2nKlCmsXbuWIUOGkJSUREREBCdOnODjjz9mxYoVHDx4kAsvvNCpPlNTU4mPj6dfv36MGTOGY8eO8dxzz3HVVVfZ76GBHx8ifOzYMa677jo6duzIoUOHeO655+xbbJ8rJ0+epG/fvkRGRvLHP/6RTp06UVpayurVq3n33XdJSEigV69eAAwZMoQ33niDv/zlL8THx5Ofn8+CBQsIDw93mNuZjBgxgtdff5177rmHLVu2EB0dTU1NDfv37+f111+3P0fnbKqrq+2XXpWXl3Po0CHWrl3L3r17GThwIAsXLvzlH4qTLrvsMt5++20GDBhAXFwcmzdv/tl7wn5OREQEiYmJzJ07l6NHj9q3B697RlRjV+T69etn3zih/rOy+vbtS2pqqj2uTrdu3bj00ku5//77+fbbbwkICGDlypUN7lWqyxNg4sSJxMXF4e7uzl//+lf69+/P3XffTWpqKnv27CE2NhZPT0+++OILMjIyeOaZZxg2bJjTn8uyZctwd3c/4zbpN910Ew899BDLly9n8uTJPPvss/Tr14+rr76acePGERoaysGDB3nzzTftfzh68sknefvtt+nfv7992/rDhw+TkZHB9u3badeuXaN/VzTm5zo8PJwBAwYQERFBYGAg77//PitWrGDChAlOfx4iv3mu2GpPRFynbovi021VW1NTY1x66aXGpZdeat9+9ssvvzRGjhxphISEGJ6ensbFF19sDBkyxFixYoXDuR9++KFx7bXXGt7e3kbHjh2N1NRU49lnnzUAo6ioyB5Xf3twwzCM4uJiY/To0caFF15oeHl5GT169DDS0tIcYuq20P7Xv/7VIG/qbWf8zTffGH/5y1+Mdu3aGWaz2bj55puNwsLCBnHNuT34mbbj/eGHH4xp06YZl112meHl5WVceOGFRt++fY3Zs2cblZWVTs/NMAxj5cqVRlhYmOHt7W2Eh4cbb7zxhjFq1CiHvFasWGHExsYaFovF8PLyMjp37mzcfffdxuHDh392jvXHrNtyuqSkxCGuMZ9fVVWV8eKLLxoJCQlGly5dDG9vb6NNmzZGr169jH/9618O24HX1tYaTz75pD2uV69exvr16xvMzTDO/JlXVlYaM2fONK666irD29vbuOCCC4yIiAjjscceM2w221nnPWrUKAOwv9q0aWN07drVSExMNFasWGHU1NQ0OOds3/2Ztgev/7O3ZcsWAzC2bNly1n537dpl+Pv7GzExMfbttX/Jd3XixAnDarUagYGBhp+fn5GQkGDk5eUZgPHUU0+d7aOye+uttwzA8PDwME6cOOFw7OjRo4bJZDIAY9euXQ7HPv30U2PQoEGGn5+fceGFFxp33XWX8dFHHxmAw89+dXW1kZycbLRv397e108tXLjQiIiIMHx9fQ1/f3+jR48ext///nejsLDwrJ/l6VRWVhpBQUHGtddee9a40NBQo1evXvb3+/bts/++8fHxMa688krjH//4h8M5hw4dMkaOHGl/DMMll1xiWK1Wh//+G/O7ojE/1//85z+Na665xmjXrp3h6+trdOvWzXjiiSfsfYhI45kMoxnv7BQR+YlJkybxwgsvcPz48TPeXC4irceePXvo1asXr7zySqO29xcROZ/pHiURaRanTp1yeH/06FFefvll+vXrpyJJpBWq/zMLP97L5+bmRkxMjAsyEhFpXXSPkog0i6ioKAYMGEBYWBjFxcUsXryYsrKyMz6DSURca9asWeTm5jJw4EA8PDzs202PGzfuF2+lLiJyPtCldyLSLB588EFWrFjBN998g8lk4uqrr+aRRx5ptq2xRaR5ZWZm8thjj/Hpp59y/PhxOnfuzIgRI3jooYfw8NDfUUVEVCiJiIiIiIjUo3uURERERERE6lGhJCIiIiIiUs95fxFybW0thYWF+Pv7N/oBeiIiIiIicv4xDIMffviBiy66CDe3s68ZnfeFUmFhoXbvERERERERu6+//pqOHTueNea8L5T8/f2BHz+MgIAAF2cjIiIiIiKuUlZWRqdOnew1wtmc94VS3eV2AQEBKpRERERERKRRt+RoMwcREREREZF6VCiJiIiIiIjUo0JJRERERESknvP+HiURERERkV+DmpoaqqqqXJ3Gr5qnpyfu7u7N0pcKJRERERERFzIMg6KiIkpLS12dynmhXbt2hISE/OJnqKpQEhERERFxoboiyWKx0KZNm1/8D/zfKsMwOHnyJEeOHAGgQ4cOv6g/FUoiIiIiIi5SU1NjL5KCgoJcnc6vnq+vLwBHjhzBYrH8osvwtJmDiIiIiIiL1N2T1KZNGxdncv6o+yx/6f1eKpRERERERFxMl9s1n+b6LFUoiYiIiIiI1KNCSUREREREpB4VSiIiIiIivyGGYTBo0CDi4uIaHJs3bx7t2rXjm2++cUFmrYsKJRERERGR3xCTyURaWhq7du3ihRdesLfn5+fz97//neeee46OHTs265i/xgfpqlASEREREfmN6dSpE8888wz3338/+fn5GIbB2LFjiY2NpVevXtxwww34+fkRHBzMiBEj+O677+znbty4kX79+tGuXTuCgoIYMmQIX375pf34wYMHMZlMvPbaa/Tv3x8fHx+WLVvmimn+IiqURERERER+g0aNGsX111/PmDFj+M9//sO+fft44YUXuO666+jVqxfvv/8+GzdupLi4mOHDh9vPO3HiBJMnT+b9999n06ZNuLm58Ze//IXa2lqH/h944AHuvfdePvvss9Ne5tfamQzDMFydREsqKyvDbDZjs9kICAhwdToiIiIiInbl5eXk5+cTGhqKj4/POR//yJEjXHXVVRw7doyVK1eyb98+3n33Xd566y17zDfffEOnTp3Iy8vjiiuuaNDHd999R/v27fn444/p3r07Bw8eJDQ0lLlz53Lvvfeey+kAZ/9MnakNtKIkIiIiIvIbZbFYuPvuuwkLCyMhIYGPPvqILVu24OfnZ39169YNwH553RdffMGtt97KJZdcQkBAAF27dgWgoKDAoe/evXuf07k0Nw9XJyAiIiIiIq7j4eGBh8ePZcHx48e58cYbmTlzZoO4Dh06AHDjjTfSpUsXXnzxRS666CJqa2vp3r07lZWVDvFt27Zt+eRbkAolEREREREB4Oqrr2blypV07drVXjz91NGjR8nLy+PFF1/k2muvBWD79u3nOs1zQpfeiYiIiIgIAFarlWPHjnHrrbfy3nvv8eWXX/LWW28xevRoampquOCCCwgKCmLhwoUcOHCAzZs3M3nyZFen3SJUKImIiIiICAAXXXQRO3bsoKamhtjYWHr06MGkSZNo164dbm5uuLm5sXz5cnJzc+nevTspKSn861//cnXaLcKlu9517dqVQ4cONWj/29/+xuOPP84jjzzC22+/TUFBAe3btychIYHHH38cs9nc6DG0652IiIiItFau3vXufNRcu9659B6l9957j5qaGvv7ffv2MXjwYG6++WYKCwspLCxk9uzZhIeHc+jQIe655x4KCwtZsWKFC7MW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L4cxBgwYQM+ePZk7d+5ZcznbZ+pMbaAVJRERERGR1sIwoPKEa16/YP3EZrMBEBgYCEBubi5VVVUMGjTIHtOtWzc6d+5MdnY2ANnZ2fTo0cNeJAHExcVRVlbGJ5980uRcmouHqxMQEREREZH/U3USnrzINWM/WAhebZ0+rba2lkmTJhEdHU337t0BKCoqwsvLi3bt2jnEBgcHU1RUZI/5aZFUd7zumKupUBIRERERkSazWq3s27eP7du3uzqVZqVCSURERESktfBs8+PKjqvGdtKECRNYv34927Zto2PHjvb2kJAQKisrKS0tdVhVKi4uJiQkxB6ze/duh/7qdsWri3El3aMkIiIiItJamEw/Xv7mipfJ1Og0DcNgwoQJrFq1is2bNxMaGupwPCIiAk9PTzZt2mRvy8vLo6CggKioKACioqL4+OOPOXLkiD0mMzOTgIAAwsPDf+EH+ctpRUlERERERJxitVpJT09nzZo1+Pv72+8pMpvN+Pr6YjabGTt2LJMnTyYwMJCAgACSk5OJiooiMjISgNjYWMLDwxkxYgSzZs2iqKiI6dOnY7Va8fb2to+1Z88eAI4fP05JSQl79uzBy8urxYspbQ8uIiIiIuIiv9btwU1nWH1KS0sjKSkJ+HFu9913H6+++ioVFRXExcUxb948h8vqDh06xPjx49m6dStt27Zl1KhRPPXUU3h4/P/1nNON1aVLFw4ePHjaHJpre3AVSiIiIiIiLvJrLZRaMz1HSUREREREpIWoUBIREREREalHhZKIiIiIiEg9KpRERERERETqUaEkIiIiIiJSjwolERERERGRelQoiYiIiIiI1KNCSUREREREpB4VSiIiIiIiIvWoUBIREREREalHhZKIiIiIiDglNTWVPn364O/vj8ViISEhgby8PIeY8vJyrFYrQUFB+Pn5kZiYSHFxsUNMQUEB8fHxtGnTBovFwpQpU6iurrYff+ONNxg8eDDt27cnICCAqKgo3nrrrXMyRxVKIiIiIiLilKysLKxWKzk5OWRmZlJVVUVsbCwnTpywx6SkpLBu3ToyMjLIysqisLCQoUOH2o/X1NQQHx9PZWUlO3fuZOnSpSxZsoSHH37YHrNt2zYGDx7M//73P3Jzcxk4cCA33ngjH374YYvP0WQYhtHio7hQWVkZZrMZm81GQECAq9MREREREbErLy8nPz+f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bm4uVVVVDBo0yB7TrVs3OnfuTHZ2NgDZ2dn06NHDXiQBxMXFUVZWxieffOLQf8+ePenQoQODBw9mx44dLT0dADzOySgiIiIiIvKzDMOguqLCJWN7eHtjMpmcPq+2tpZJkyYRHR1N9+7dASgqKsLLy6vBKlBwcLD9/qKioiKHIqnueN0xgA4dOrBgwQJ69+5NRUUFixYtYsCAAezatYurr77a6VydoUJJRERERKSVqK6o4NlRw1wy9sSlK/BswuV/VquVffv2sX379mbP6corr+TKK6+0v+/bty9ffvklc+bM4eWXX2728X5Kl96JiIiIiEiTTJgwgfXr17NlyxY6duxobw8JCaGyspLS0lKH+OLiYkJCQuwx9XfBq3tfF3M611xzDQcOHGimGZyZVpRERERERFoJD29vJi5d4bKxG8swDJKTk1m1ahVbt24lNDTU4XhERASenp5s2rSJxMRE4Med6woKCoiKigIgKiqKJ554giNHjth3scvMzCQgIIDw8PAzjr1nzx46dOjg7PScpkJJRERERKSVMJlMTbr87VyzWq2kp6ezZs0a/P397fcUmc1mfH19MZvNjB07lsmTJxMYGEhAQADJyclERUURGRkJQGxsLOHh4YwYMYJZs2ZRVFTE9OnTsVqteP9f0TZ37lxCQ0O56qqrKC8vZ9GiRWzevJm33367xeeoQklERERERJwyf/58AAYMGODQnpaWRlJSEgBz5szBzc2NxMREKioqiIuLY968efZYd3d31q9fz/jx44mKiqJt27aMGjWKGTNm2GMqKyu57777+Pbbb2nTpg2/+93veOeddxg4cGCLz1HPURIRERERcZHz5TlKrYmeoyQiIiIiItJCVCiJiIiIiIjUo0JJRERERESkHhVKIiIiIiIi9ahQEhERERERqUeFkoiIiIiISD0qlEREREREROpRoSQiIiIiIlKPCiUREREREZF6VCiJiIiIiIjUo0JJRERERESckpqaSp8+ffD398disZCQkEBeXp5DTHl5OVarlaCgIPz8/EhMTKS4uNghpqCggPj4eNq0aYPFYmHKlClUV1c7xFRUVPDQQw/RpUsXvL296dq1Ky+99FKLz9GjxUcQEREREZHzSlZWFlarlT59+lBdXc2DDz5IbGwsn376KW3btgUgJSWFN998k4yMDMxmMxMmTGDo0KHs2LEDgJqaGuLj4wkJCWHnzp0cPnyYkSNH4unpyZNPPmkfa/jw4RQXF7N48WIuu+wyDh8+TG1tbYvP0WQYhtHio7hQWVkZZrMZm81GQECAq9MREREREbErLy8nPz+f0NBQfHx8XJ1Ok5WUlGCxWMjKyiImJgabzUb79u1JT09n2LBhAOzfv5+wsDCys7OJjIxkw4YNDBkyhMLCQoKDgwFYsGABU6dOpaSkBC8vLzZu3Mhf//pXvvrqKwIDAxuVy9k+U2dqA116JyIiIiLSShiGQW1ljUtev2T9xGazAdiLmdzcXKqqqhg0aJA9plu3bnTu3Jns7GwAsrOz6dGjh71IAoiLi6OsrIxPPvkEgLVr19K7d29mzZrFxRdfzBVXXMH999/PqVOnmpxrY+nSOxERERGRVsKoqqXw4Z0uGfuiGX0xebk7fV5tbS2TJk0iOjqa7t27A1BUVISXlxft2rVziA0ODqaoqMge89Miqe543TGAr776iu3bt+Pj48OqVav47rvv+Nvf/sbRo0dJS0tzOldnqFASEREREZEms1qt7Nu3j+3btzd737W1tZhMJpYtW4bZbAbg3//+N8OGDWPevHn4+vo2+5h1VCiJiIiIiLQSJk83LprR12VjO2vChAmsX7+ebdu20bFjR3t7SEgIlZWVlJaWOqwqFRcXExISYo/ZvXu3Q391u+LVxXTo0IGLL77YXiQBhIWFYRgG33zzDZdffrnTOTeW7lESEREREWklTCYTbl7uLnmZTKZG52kYBhMmTGDVqlVs3ryZ0NBQh+MRERF4enqyadMme1teXh4FBQVERUUBEBUVxccff8yRI0fsMZmZmQQEBBAeHg5AdHQ0hYWFHD9+3B7z+eef4+bm5lCYtQQVSiIiIiIi4hSr1corr7xCeno6/v7+FBUVUVRUZN9kwWw2M3bsWCZPnsyWLVvIzc1l9OjRREVFERkZCUBsbCzh4eGMGDGCjz76iLfeeovp06djtVrx9vYG4LbbbiMoKIjRo0fz6aefsm3bNqZMmcKYMWNa9LI7UKEkIiIiIiJOmj9/PjabjQEDBtChQwf767XXXrPHzJkzhyFDhpCYmEhMTAwhISG88cYb9uPu7u6sX78ed3d3oqKiuOOOOxg5ciQzZsywx/j5+ZGZmUlpaSm9e/fm9ttv58Ybb+TZZ59t8TnqOUoiIiIiIi5yvjxHqTXRc5RERERERERaiAolERERERGRelQoiYiIiIiI1KNCSUREREREpB4VSiIiIiIiIvWoUBIREREREalHhZKIiIiIiEg9KpRERERERETqUaEkIiIiIiJST5MLpcrKSvLy8qiurm7OfERERERERFzO6ULp5MmTjB07ljZt2nDVVVdRUFAAQHJyMk899VSzJygiIiIiIq1Lamoqffr0wd/fH4vFQkJCAnl5eQ4x5eXlWK1WgoKC8PPzIzExkeLiYoeYgoIC4uPjadOmDRaLhSlTpjgsxCQlJWEymRq8rrrqqhafo9OF0rRp0/joo4/YunUrPj4+9vZBgwbx2muvNWtyIiIiIiLS+mRlZWG1WsnJySEzM5OqqipiY2M5ceKEPSYlJYV169aRkZFBVlYWhYWFDB061H68pqaG+Ph4Kisr2blzJ0uXLmXJkiU8/PDD9phnnnmGw4cP219ff/01gYGB3HzzzS0+R5NhGIYzJ3Tp0oXXXnuNyMhI/P39+eijj7jkkks4cOAAV199NWVlZS2Va5OUlZVhNpux2WwEBAS4Oh0REREREbvy8nLy8/MJDQ11WIT4tSkpKcFisZCVlUVMTAw2m4327duTnp7OsGHDANi/fz9hYWFkZ2cTGRnJhg0bGDJkCIWFhQQHBwOwYMECpk6dSklJCV5eXg3GWb16NUOHDiU/P58uXbqcNpezfabO1AZOryjVfQj1nThxApPJ5Gx3IiIiIiLyfwzDoLKy0iUvJ9dPHNhsNgACAwMByM3NpaqqikGDBtljunXrRufOncnOzgYgOzubHj162IskgLi4OMrKyvjkk09OO87ixYsZNGjQGYuk5uTh7Am9e/fmzTffJDk5GcBeHC1atIioqKjmzU5ERERE5DekqqqKJ5980iVjP/jgg6ddxfk5tbW1TJo0iejoaLp37w5AUVERXl5etGvXziE2ODiYoqIie8xPi6S643XH6issLGTDhg2kp6c7nWNTOF0oPfnkk9xwww18+umnVFdX88wzz/Dpp5+yc+dOsrKyWiJHERERERFppaxWK/v27WP79u0tOs7SpUtp164dCQkJLTpOHacLpX79+rFnzx6eeuopevTowdtvv83VV19tXzoTEREREZGm8fT05MEHH3TZ2M6aMGEC69evZ9u2bXTs2NHeHhISQmVlJaWlpQ6rSsXFxYSEhNhjdu/e7dBf3a54dTF1DMPgpZdeYsSIEU1a9WoKpwslgEsvvZQXX3yxuXMREREREflNM5lM56wQ+CUMwyA5OZlVq1axdetWQkNDHY5HRETg6enJpk2bSExMBCAvL4+CggL77TpRUVE88cQTHDlyxL4HQmZmJgEBAYSHhzv0l5WVxYEDBxg7duw5mN2PnC6UzrSrnclkwtvb+1fxxYqIiIiISNNZrVbS09NZs2YN/v7+9nuKzGYzvr6+mM1mxo4dy+TJkwkMDCQgIIDk5GSioqKIjIwEIDY2lvDwcEaMGMGsWbMoKipi+vTpWK1WvL29HcZbvHgxf/jDH+z3QJ0LThdK7dq1O+vudh07diQpKYlHHnkENzenN9UTEREREZFWbv78+QAMGDDAoT0tLY2kpCQA5syZg5ubG4mJiVRUVBAXF8e8efPsse7u7qxfv57x48cTFRVF27ZtGTVqFDNmzHDo02azsXLlSp555pkWnVN9ThdKS5Ys4aGHHiIpKYlrrrkGgN27d7N06VKmT59OSUkJs2fPxtvb22XXV4qIiIiISMtpzFbiPj4+PP/88zz//PNnjOnSpQv/+9//ztqP2Wzm5MmTTuf4SzldKC1dupSnn36a4cOH29tuvPFGevTowQsvvMCmTZvo3LkzTzzxhAolERERERH5VXL62ridO3fSq1evBu29evWyPzyqX79+FBQU/PLsREREREREXMDpQqlTp04sXry4QfvixYvp1KkTAEePHuWCCy745dmJiIiIiIi4gNOX3s2ePZubb76ZDRs20KdPHwDef/999u/fz4oVKwB47733uOWWW5o3UxERERERkXPE6ULppptuIi8vjxdeeIG8vDwAbrjhBlavXk3Xrl0BGD9+fLMmKSIiIiIici416YGzXbt2JTU1tblzERERERERaRWaVCgBnDx5koKCAiorKx3af/e73/3ipERERERERFzJ6UKppKSE0aNHs2HDhtMer6mp+cVJiYiIiIiIuJLTu95NmjSJ0tJSdu3aha+vLxs3bmTp0qVcfvnlrF27tiVyFBEREREROaecXlHavHkza9asoXfv3ri5udGlSxcGDx5MQEAAqampxMfHt0SeIiIiIiIi54zTK0onTpzAYrEAcMEFF1BSUgJAjx49+OCDD5o3OxERERERaXVSU1Pp06cP/v7+WCwWEhIS7Dti1ykvL8dqtRIUFISfnx+JiYkUFxc7xBQUFBAfH0+bNm2wWCxMmTKF6upqh5hly5bx+9//njZt2tChQwfGjBnD0aNHW3yOThdKV155pf1D+P3vf88LL7zAt99+y4IFC+jQoUOzJygiIiIiIq1LVlYWVquVnJwcMjMzqaqqIjY2lhMnTthjUlJSWLduHRkZGWRlZVFYWMjQoUPtx2tqaoiPj6eyspKdO3eydOlSlixZwsMPP2yP2bFjByNHjmTs2LF88sknZGRksHv3bu66664Wn6PJMAzDmRNeeeUVqqurSUpKIjc3lz/+8Y8cO3YMLy8vlixZ0uoeNFtWVobZbMZmsxEQEODqdERERERE7MrLy8nPzyc0NBQfHx9Xp9NkJSUlWCwWsrKyiImJwWaz0b59e9LT0xk2bBgA+/fvJywsjOzsbCIjI9mwYQNDhgyhsLCQ4OBgABYsWMDUqVMpKSnBy8uL2bNnM3/+fL788kv7WM899xwzZ87km2++OW0uZ/tMnakNnF5RuuOOO0hKSgIgIiKCQ4cO8d577/H111+3uiJJREREROTXxDAMampOuuTl5PqJA5vNBkBgYCAAubm5VFVVMWjQIHtMt27d6Ny5M9nZ2QBkZ2fTo0cPe5EEEBcXR1lZGZ988gkAUVFRfP311/zvf//DMAyKi4tZsWIFf/rTn5qca2M1+TlKdby9vXFzc8Pd3b058hERERER+c2qrT3F1qweLhl7QP+PcXdv4/R5tbW1TJo0iejoaLp37w5AUVERXl5etGvXziE2ODiYoqIie8xPi6S643XHAKKjo1m2bBm33HIL5eXlVFdXc+ONN/L88887naezmrQ9+OLFi4EfryuMiYnh6quvplOnTmzdurW58xMRERERkVbMarWyb98+li9f3ux9f/rpp9x77708/PDD5ObmsnHjRg4ePMg999zT7GPV5/SK0ooVK7jjjjsAWLduHQcPHmT//v28/PLLPPTQQ+zYsaPZkxQRERER+S1wc/NlQP+PXTa2syZMmMD69evZtm0bHTt2tLeHhIRQWVlJaWmpw6pScXExISEh9pjdu3c79Fe3K15dTGpqKtHR0UyZMgWA3/3ud7Rt25Zrr72Wf/7zny26mZzTK0rfffedPfH//e9/3HzzzVxxxRWMGTOGjz92zZcqIiIiInI+MJlMuLu3ccnLZDI1Ok/DMJgwYQKrVq1i8+bNhIaGOhyPiIjA09OTTZs22dvy8vIoKCggKioK+PH+o48//pgjR47YYzIzMwkICCA8PByAkydP4ubmWLLU3fLzS+6pagynC6Xg4GA+/fRTampq2LhxI4MHDwZ+nITuUxIREREROf9ZrVZeeeUV0tPT8ff3p6ioiKKiIk6dOgWA2Wxm7NixTJ48mS1btpCbm8vo0aOJiooiMjISgNjYWMLDwxkxYgQfffQRb731FtOnT8dqteLt7Q3AjTfeyBtvvMH8+fP56quv2LFjBxMnTuSaa67hoosuatE5On3p3ejRoxk+fDgdOnTAZDLZd7LYtWsX3bp1a/YERURERESkdZk/fz4AAwYMcGhPS0uz75A9Z84c3NzcSExMpKKigri4OObNm2ePdXd3Z/369YwfP56oqCjatm3LqFGjmDFjhj0mKSmJH374gf/85z/cd999tGvXjuuuu46ZM2e2+Bydfo4S/Hif0tdff83NN99svxZx6dKltGvXjj//+c9O9fXtt98ydepUNmzYwMmTJ7nssstIS0ujd+/eABw/fpwHHniA1atXc/ToUUJDQ5k4cWKjb+DSc5REREREpLU6X56j1Jo013OUmrQ9eN1Do35q1KhRTvfz/fffEx0dzcCBA9mwYQPt27fniy++4IILLrDHTJ48mc2bN/PKK6/QtWtX3n77bf72t79x0UUXcdNNNzUlfRERERERkbNqdKE0efLk07abzWauuOIKhg4dar+WsLFmzpxJp06dSEtLs7fVvxFs586djBo1yr6sN27cOF544QV2796tQklERERERFpEozdz+PDDD0/7Wr16NePGjSM8PJyCggKnBl+7di29e/fm5ptvxmKx0KtXL1588UWHmL59+7J27Vq+/fZbDMNgy5YtfP7558TGxp62z4qKCsrKyhxeIiIiIiIizmj0itKWLVvOeKysrIzbb7+dBx54gPT09EYP/tVXXzF//nwmT57Mgw8+yHvvvcfEiRPx8vKyX8r33HPPMW7cODp27IiHhwdubm68+OKLxMTEnLbP1NRUHnvssUbnICIiIiIiUp/T24OfTkBAAP/4xz+cfthsbW0tV199NU8++SS9evVi3Lhx3HXXXSxYsMAe89xzz5GTk8PatWvJzc3l6aefxmq18s4775y2z2nTpmGz2eyvr7/++hfNTUREREREfnuatJnD6Vx44YUcO3bMqXM6dOhgf5hUnbCwMFauXAnAqVOnePDBB1m1ahXx8fHAj0/j3bNnD7Nnz7ZvTf5T3t7eTt8rJSIiIiIi8lPNsqIEkJOTw6WXXurUOdHR0eTl5Tm0ff7553Tp0gWAqqoqqqqqTvs03tra2l+WsIiIiIiIyBk0ekVp7969p2232Wzk5uby5JNP8sgjjzg1eEpKCn379uXJJ59k+PDh7N69m4ULF7Jw4ULgx0v6+vfvz5QpU/D19aVLly5kZWXx3//+l3//+99OjSUiIiIiItJYjS6Uevbsiclk4nTPp73wwguZPHkyf/vb35wavE+fPqxatYpp06YxY8YMQkNDmTt3Lrfffrs9Zvny5UybNo3bb7+dY8eO0aVLF5544olGP3BWRERERETEWY0ulPLz80/bHhAQ4PCAWGcNGTKEIUOGnPF4SEiIw3OWREREREREWlqj71Hq0qXLaV+/pEgSEREREZFfn9TUVPr06YO/vz8Wi4WEhIQGew+Ul5djtVoJCgrCz8+PxMREiouLHWIKCgqIj4+nTZs2WCwWpkyZQnV1tUPM888/T1hYGL6+vlx55ZX897//bfH5QTNu5iAiIiIiIr8NWVlZWK1WcnJyyMzMpKqqitjYWE6cOGGPSUlJYd26dWRkZJCVlUVhYSFDhw61H6+pqSE+Pp7Kykp27tzJ0qVLWbJkCQ8//LA9Zv78+UybNo1HH32UTz75hMceewyr1cq6detafI4m43Q3HZ1HysrKMJvN2Gw2AgICXJ2OiIiIiIhdeXk5+fn5hIaG4uPj4+p0mqykpASLxUJWVhYxMTHYbDbat29Peno6w4YNA2D//v2EhYWRnZ1NZGQkGzZsYMiQIRQWFhIcHAzAggULmDp1KiUlJXh5edG3b1+io6P517/+ZR/rvvvuY9euXWzfvv20uZztM3WmNtCKkoiIiIhIK2EYBidqalzy+iXrJzabDYDAwEAAcnNzqaqqcnjuabdu3ejcuTPZ2dkAZGdn06NHD3uRBBAXF0dZWRmffPIJABUVFQ2KHV9fX3bv3k1VVVWT822MZnvgrIiIiIiI/DIna2u5dNvHLhn7y5getHV3d/q82tpaJk2aRHR0NN27dwegqKgILy8v2rVr5xAbHBxMUVGRPeanRVLd8bpj8GPhtGjRIhISErj66qvJzc1l0aJFVFVV8d1339GhQwen822sJq0olZaWsmjRIqZNm8axY8cA+OCDD/j222+bNTkREREREWndrFYr+/btY/ny5c3e9z/+8Q9uuOEGIiMj8fT05M9//jOjRo0CwM2tZS+Oc3pFae/evQwaNAiz2czBgwe56667CAwM5I033qCgoOCc7UIhIiIiInK+aePmxpcxPVw2trMmTJjA+vXr2bZtGx07drS3h4SEUFlZSWlpqcOqUnFxMSEhIfaY3bt3O/RXtyteXYyvry8vvfQSL7zwAsXFxXTo0IGFCxfi7+9P+/btnc7XGU5/GpMnTyYpKYkvvvjC4XrBP/3pT2zbtq1ZkxMRERER+S0xmUy0dXd3yctkMjU6T8MwmDBhAqtWrWLz5s2EhoY6HI+IiMDT05NNmzbZ2/Ly8igoKCAqKgqAqKgoPv74Y44cOWKPyczMJCAggPDwcIf+PD096dixI+7u7ixfvpwhQ4a0vhWl9957jxdeeKFB+8UXX2y/llBERERERM5fVquV9PR01qxZg7+/v70OMJvN+Pr6YjabGTt2LJMnTyYwMJCAgACSk5OJiooiMjISgNjYWMLDwxkxYgSzZs2iqKiI6dOnY7Va8fb2BuDzzz9n9+7d/OEPf+D777/n3//+N/v27WPp0qUtPkenCyVvb2/KysoatH/++ectvvwlIiIiIiKuN3/+fAAGDBjg0J6WlkZSUhIAc+bMwc3NjcTERCoqKoiLi2PevHn2WHd3d9avX8/48eOJioqibdu2jBo1ihkzZthjampqePrpp8nLy8PT05OBAweyc+dOunbt2tJTdP45SnfeeSdHjx7l9ddfJzAwkL179+Lu7k5CQgIxMTHMnTu3hVJtGj1HSURERERaq/PlOUqticueo/T0009z/PhxLBYLp06don///lx22WX4+/vzxBNPONudiIiIiIhIq+P0pXdms5nMzEy2b9/O3r17OX78OFdffbXDw6RERERERER+zZr8wNl+/frRr1+/5sxFRERERESkVXC6UHr22WdP224ymfDx8eGyyy4jJiYG9yY81VdERERERKQ1cLpQmjNnDiUlJZw8eZILLrgAgO+//542bdrg5+fHkSNHuOSSS9iyZQudOnVq9oRFRERERERamtObOTz55JP06dOHL774gqNHj3L06FE+//xz/vCHP/DMM89QUFBASEgIKSkpLZGviIiIiIhIi3N6RWn69OmsXLmSSy+91N522WWXMXv2bBITE/nqq6+YNWsWiYmJzZqoiIiIiIjIueL0itLhw4eprq5u0F5dXW1/Iu9FF13EDz/88MuzExERERERcQGnC6WBAwdy99138+GHH9rbPvzwQ8aPH891110HwMcff0xoaGjzZSkiIiIiInIOOV0oLV68mMDAQCIiIvD29sbb25vevXsTGBjI4sWLAfDz8+Ppp59u9mRFRERERETOBacLpZCQEDIzM/n000/JyMggIyODTz/9lLfffpvg4GDgx1Wn2NjYZk9WRERERERcLzU1lT59+uDv74/FYiEhIYG8vDyHmPLycqxWK0FBQfj5+ZGYmEhxcbFDzMSJE+0LMD179jztWHv37uXaa6/Fx8eHTp06MWvWrJaalgOnC6U63bp146abbuKmm27iyiuvbM6cRERERESkFcvKysJqtZKTk0NmZiZVVVXExsZy4sQJe0xKSgrr1q0jIyODrKwsCgsLGTp0aIO+xowZwy233HLaccrKyoiNjaVLly7k5ubyr3/9i0cffZSFCxe22NzqOL3rHcA333zD2rVrKSgooLKy0uHYv//972ZJTEREREREWqeNGzc6vF+yZAkWi4Xc3FxiYmKw2WwsXryY9PR0+z4GaWlphIWFkZOTQ2RkJADPPvssACUlJezdu7fBOMuWLaOyspKXXnoJLy8vrrrqKvbs2cO///1vxo0b16JzdLpQ2rRpEzfddBOXXHIJ+/fvp3v37hw8eBDDMLj66qtbIkcRERERkd8EwzA4VVXjkrF9Pd0xmUxNOtdmswEQGBgIQG5uLlVVVQwaNMge061bNzp37kx2dra9UPo52dnZxMTE4OXlZW+Li4tj5syZfP/991xwwQVNyrcxnC6Upk2bxv33389jjz2Gv78/K1euxGKxcPvtt/PHP/6xJXIUEREREflNOFVVQ/jDb7lk7E9nxNHGy/kLzmpra5k0aRLR0dF0794dgKKiIry8vGjXrp1DbHBwsP2RQo1RVFTUYDftun0RioqKWrRQcvoepc8++4yRI0cC4OHhwalTp/Dz82PGjBnMnDmz2RMUEREREZHWy2q1sm/fPpYvX+7qVJqV0yVj27Zt7fcldejQgS+//JKrrroKgO+++655sxMRERER+Q3x9XTn0xlxLhvbWRMmTGD9+vVs27aNjh072ttDQkKorKyktLTUYVWpuLiYkJCQRvcfEhLSYKe8uvfO9NMUThdKkZGRbN++nbCwMP70pz9x33338fHHH/PGG280+lpDERERERFpyGQyNenyt3PNMAySk5NZtWoVW7dubXB5XEREBJ6enmzatInExEQA8vLyKCgoICoqqtHjREVF8dBDD1FVVYWnpycAmZmZXHnllS162R00oVD697//zfHjxwF47LHHOH78OK+99hqXX365drwTEREREfkNsFqtpKens2bNGvz9/e33HZnNZnx9fTGbzYwdO5bJkycTGBhIQEAAycnJREVFOSyuHDhwgOPHj1NUVMSpU6fYs2cPAOHh4Xh5eXHbbbfx2GOPMXbsWKZOncq+fft45plnmDNnTovP0WQYhtHY4JqaGnbs2MHvfve7BjdmtVZlZWWYzWZsNhsBAQGuTkdERERExK68vJz8/HxCQ0Px8fFxdTqNdqbd8dLS0khKSgJ+nNt9993Hq6++SkVFBXFxccybN8/hkrkBAwaQlZXVoJ/8/Hy6du0K/PjAWavVynvvvceFF15IcnIyU6dOPWNuZ/tMnakNnCqUAHx8fPjss88aLK+1ViqURERERKS1+rUWSq1ZcxVKTu961717d7766itnTxMREREREfnVcLpQ+uc//8n999/P+vXrOXz4MGVlZQ4vERERERGRXzunN3P405/+BMBNN93kcG2iYRiYTCZqalzzJGEREREREZHm4nShtGXLlpbIQ0REREREpNVwulDq379/S+QhIiIiIiLSajh9jxLAu+++yx133EHfvn359ttvAXj55ZfZvn17syYnIiIiIiLiCk4XSitXriQuLg5fX18++OADKioqALDZbDz55JPNnqCIiIiIiMi51qRd7xYsWMCLL76Ip6envT06OpoPPvigWZMTERERERFxBacLpby8PGJiYhq0m81mSktLmyMnERERERERl3K6UAoJCeHAgQMN2rdv384ll1zSLEmJiIiIiIi4ktOF0l133cW9997Lrl27MJlMFBYWsmzZMu6//37Gjx/fEjmKiIiIiEgrkpqaSp8+ffD398disZCQkEBeXp5DTHl5OVarlaCgIPz8/EhMTKS4uNghZuLEiURERODt7U3Pnj0bjFNeXk5SUhI9evTAw8ODhISEFpyVI6cLpQceeIDbbruN66+/nuPHjxMTE8Odd97J3XffTXJyckvkKCIiIiIirUhWVhZWq5WcnBwyMzOpqqoiNjaWEydO2GNSUlJYt24dGRkZZGVlUVhYyNChQxv0NWbMGG655ZbTjlNTU4Ovry8TJ05k0KBBLTaf0zEZhmE05cTKykoOHDjA8ePHCQ8Px8/Pr7lzaxZlZWWYzWZsNhsBAQGuTkdERERExK68vJz8/HxCQ0Px8fFxdTpNVlJSgsViISsri5iYGGw2G+3btyc9PZ1hw4YBsH//fsLCwsjOziYyMtLh/EcffZTVq1ezZ8+eM46RlJREaWkpq1evPmsuZ/tMnakNnH7g7CuvvMLQoUNp06YN4eHhzp4uIiIiIiJnYhhQddI1Y3u2AZOpSafabDYAAgMDAcjNzaWqqsphFahbt2507tz5tIVSa+R0oZSSksI999zDTTfdxB133EFcXBzu7u4tkZuIiIiIyG9L1Ul48iLXjP1gIXi1dfq02tpaJk2aRHR0NN27dwegqKgILy8v2rVr5xAbHBxMUVFRc2Tb4py+R+nw4cMsX74ck8nE8OHD6dChA1arlZ07d7ZEfiIiIiIi0opZrVb27dvH8uXLXZ1Ks3J6RcnDw4MhQ4YwZMgQTp48yapVq0hPT2fgwIF07NiRL7/8siXyFBERERE5/3m2+XFlx1VjO2nChAmsX7+ebdu20bFjR3t7SEgIlZWVlJaWOqwqFRcXExIS0hzZtjinC6WfatOmDXFxcXz//fccOnSIzz77rLnyEhERERH57TGZmnT527lmGAbJycmsWrWKrVu3Ehoa6nA8IiICT09PNm3aRGJiIgB5eXkUFBQQFRXlipSd1qRCqW4ladmyZWzatIlOnTpx6623smLFiubOT0REREREWhmr1Up6ejpr1qzB39/fft+R2WzG19cXs9nM2LFjmTx5MoGBgQQEBJCcnExUVJTDRg51u2gXFRVx6tQp+6534eHheHl5AfDpp59SWVnJsWPH+OGHH+wxp3vuUnNyenvwv/71r6xfv542bdowfPhwbr/99lZdFWp7cBERERFprX6t24ObzrA7XlpaGklJScCPc7vvvvt49dVXqaioIC4ujnnz5jlcejdgwACysrIa9JOfn0/Xrl0B6Nq1K4cOHWoQc6YyxmXbg7u7u/P666+fdre7ffv22Xe6EBERERGR81Nj1lp8fHx4/vnnef75588Ys3Xr1p/t5+DBg05k1nycLpSWLVvm8P6HH37g1VdfZdGiReTm5lJTU9NsyYmIiIiIiLiC09uD19m2bRujRo2iQ4cOzJ49m+uuu46cnJzmzE1ERERERMQlnFpRKioqYsmSJSxevJiysjKGDx9ORUUFq1evJjw8vKVyFBEREREROacavaJ04403cuWVV7J3717mzp1LYWEhzz33XEvmJiIiIiIi4hKNXlHasGEDEydOZPz48Vx++eUtmZOIiIiIiIhLNXpFafv27fzwww9ERETwhz/8gf/85z989913LZmbiIiIiIiISzS6UIqMjOTFF1/k8OHD3H333SxfvpyLLrqI2tpaMjMz+eGHH1oyTxERERERkXPG6V3v2rZty5gxY9i+fTsff/wx9913H0899RQWi4WbbrqpJXIUERERERE5p5q8PTjAlVdeyaxZs/jmm2949dVXmysnERERERERl/pFhVIdd3d3EhISWLt2bXN0JyIiIiIi4lLNUiiJiIiIiMhvR2pqKn369MHf3x+LxUJCQgJ5eXkOMeXl5VitVoKCgvDz8yMxMZHi4mKHmIkTJxIREYG3tzc9e/ZsMM7WrVv585//TIcOHWjbti09e/Zk2bJlLTk1OxVKIiIiIiLilKysLKxWKzk5OWRmZlJVVUVsbCwnTpywx6SkpLBu3ToyMjLIysqisLCQoUOHNuhrzJgx3HLLLacdZ+fOnfzud79j5cqV7N27l9GjRzNy5EjWr1/fYnOrYzIMw2jxUVyorKwMs9mMzWYjICDA1emIiIiIiNiVl5eTn59PaGgoPj4+rk6nyUpKSrBYLGRlZRETE4PNZqN9+/akp6czbNgwAPbv309YWBjZ2dlERkY6nP/oo4+yevVq9uzZ87NjxcfHExwczEsvvXTa42f7TJ2pDRr9wFkREREREWlZhmFwqvqUS8b29fDFZDI16VybzQZAYGAgALm5uVRVVTFo0CB7TLdu3ejcufNpCyVnxwoLC2vy+Y2lQklEREREpJU4VX2KP6T/wSVj77ptF2082zh9Xm1tLZMmTSI6Opru3bsDUFRUhJeXF+3atXOIDQ4OpqioqMk5vv7667z33nu88MILTe6jsVQoiYiIiIhIk1mtVvbt28f27dtbdJwtW7YwevRoXnzxRa666qoWHQtUKImIiIiItBq+Hr7sum2Xy8Z21oQJE1i/fj3btm2jY8eO9vaQkBAqKyspLS11WFUqLi4mJCTE6XGysrK48cYbmTNnDiNHjnT6/KZQoSQiIiIi0kqYTKYmXf52rhmGQXJyMqtWrWLr1q2EhoY6HI+IiMDT05NNmzaRmJgIQF5eHgUFBURFRTk11tatWxkyZAgzZ85k3LhxzTaHn6NCSUREREREnGK1WklPT2fNmjX4+/vb7zsym834+vpiNpsZO3YskydPJjAwkICAAJKTk4mKinLYyOHAgQMcP36coqIiTp06Zd/1Ljw8HC8vL7Zs2cKQIUO49957SUxMtI/j5eVl3ziipWh7cBERERERF/m1bg9+pt3x0tLSSEpKAn6c23333cerr75KRUUFcXFxzJs3z+HSuwEDBpCVldWgn/z8fLp27UpSUhJLly5tcLx///5s3br1tDk01/bgKpRERERERFzk11ootWbNVSi5tWSSIiIiIiIiv0YqlEREREREROpRoSQiIiIiIlKPCiUREREREZF6VCiJiIiIiIjUo0JJRERERESkHhVKIiIiIiIi9ahQEhERERERqUeFkoiIiIiISD0uL5S+/fZb7rjjDoKCgvD19aVHjx68//77DjGfffYZN910E2azmbZt29KnTx8KCgpclLGIiIiIiJzvXFooff/990RHR+Pp6cmGDRv49NNPefrpp7ngggvsMV9++SX9+vWjW7dubN26lb179/KPf/wDHx8fF2YuIiIiIvLblZqaSp8+ffD398disZCQkEBeXp5DTHl5OVarlaCgIPz8/EhMTKS4uNghZuLEiURERODt7U3Pnj0bjJOXl8fAgQMJDg7Gx8eHSy65hOnTp1NVVdWS0wPAo8VHOIuZM2fSqVMn0tLS7G2hoaEOMQ899BB/+tOfmDVrlr3t0ksvPWc5ioiIiIiIo6ysLKxWK3369KG6upoHH3yQ2NhYPv30U9q2bQtASkoKb775JhkZGZjNZiZMmMDQoUPZsWOHQ19jxoxh165d7N27t8E4np6ejBw5kquvvpp27drx0Ucfcdddd1FbW8uTTz7ZonM0GYZhtOgIZxEeHk5cXBzffPMNWVlZXHzxxfztb3/jrrvuAqC2thaz2czf//53tm/fzocffkhoaCjTpk0jISHhtH1WVFRQUVFhf19WVkanTp2w2WwEBASci2mJiIiIiDRKeXk5+fn5hIaG/qqvmCopKcFisZCVlUVMTAw2m4327duTnp7OsGHDANi/fz9hYWFkZ2cTGRnpcP6j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EREREXGK1WolPT2dNWvW4O/vb7/vyGw24+vri9lsZuzYsUyePJnAwEACAgJITk4mKirKvuMdwIEDBzh+/DhFRUWcOnWKPXv2ABAeHo6XlxeDBg3i6quvZsyYMcydO5fa2lqsViuDBw92WGVqCSqURERERETEKfPnzwdgwIABDu1paWkkJSUBMGfOHNzc3EhMTKSiooK4uDjmzZvnEH/nnXeSlZVlf9+rVy8A8vPz6dq1K25ubqxbt47k5GRiYmJo27YtN9xwA08//XTLTe7/mIxfsg/gr0BZWRlmsxmbzUZAQICr0xERERERsSsvLyc/P5/Q0FB8fHxcnc554WyfqTO1ge5REhERERERqUeFkoiIiIiISD0qlEREREREROpRoSQiIiIiIlKPCiUREREREZF6VCiJiIiIiIjUo0JJRERERESkHhVKIiIiIiIi9ahQEhERERERqUeFkoiIiIiISD0qlERERERExCmpqan06dMHf39/LBYLCQkJ5OXlOcSUl5djtVoJCgrCz8+PxMREiouLHWImTpxIREQE3t7e9OzZs8E4jz76KCaTqcGrbdu2LTk9QIWSiIiIiIg4KSsrC6vVSk5ODpmZmVRVVREbG8uJEyfsMSkpKaxbt46MjAyysrIoLCxk6NChDfoaM2YMt9xyy2nHuf/++zl8+LDDKzw8nJtvvrnF5lbHo8VHEBERERGR88rGjRsd3i9ZsgSLxUJubi4xMTHYbDYWL15Meno61113HQBpaWmEhYWRk5NDZGQkAM8++ywAJSUl7N27t8E4fn5++Pn52d9/9NFHfPrppyxYsKClpmanQklEREREpJUwDIOqqiqXjO3p6YnJZGrSuTabDYDAwEAAcnNzqaqqYtCgQfaYbt260blzZ7Kzs+2FkrMWLVrEFVdcwbXXXtuk852hQklEREREpJWoqqriySefdMnYDz74IF5eXk6fV1tby6RJk4iOjqZ79+4AFBUV4eXlRbt27Rxig4ODKSoqalJ+5eXlLFu2jAceeKBJ5ztLhZKIiIiIiDSZ1Wpl3759bN++vUXHWbVqFT/88AOjRo1q0XHqqFASEREREWklPD09efDBB102trMmTJjA+vXr2bZtGx07drS3h4SEUFlZSWlpqcOqUnFxMSEhIU3Kb9GiRQwZMoTg4OAmne8sFUoiIiIiIq2EyWRq0uVv55phGCQnJ7Nq1Sq2bt1KaGiow/GIiAg8PT3ZtGkTiYmJAOTl5VFQUEBUVJTT4+Xn57NlyxbWrl3bLPk3hgolERERERFxitVqJT09nTVr1uDv72+/78hsNuPr64vZbGbs2LFMnjyZwMBAAgICSE5OJioqymEjhwMHDnD8+HGKioo4deoUe/bsASA8PNyhYHzppZfo0KEDN9xwwzmbo8ufo/Ttt99yxx13EBQUhK+vLz169OD9998/bew999yDyWRi7ty55zZJERERERGxmz9/PjabjQEDBtChQwf767XXXrPHzJkzhyFDhpCYmEhMTAwhISG88cYbDv3ceeed9OrVixdeeIHPP/+cXr160atXLwoLC+0xtbW1LFmyhKSkJNzd3c/ZHF26ovT9998THR3NwIED2bBhA+3bt+eLL77gggsuaBC7atUqcnJyuOiii1yQqYiIiIiI1DEM42djfHx8eP7553n++efPGLN169af7cfNzY2vv/7amfSahUsLpZkzZ9KpUyfS0tLsbfWvb4QfV52Sk5N56623iI+PP5cpioiIiIjIb5BLL71bu3YtvXv35uabb8ZisdCrVy9efPFFh5ja2lpGjBjBlClTuOqqq362z4qKCsrKyhxeIiIiIiIiznBpofTVV18xf/58Lr/8ct566y3Gjx/PxIkTWbp0qT1m5syZeHh4MHHixEb1mZqaitlstr86derUUumLiIiIiMh5yqWX3tXW1tK7d2/704d79erFvn37WLBgAaNGjSI3N5dnnnmGDz74AJPJ1Kg+p02bxuTJk+3vy8rKVCyJiIiIiIhTXLqi1KFDB8LDwx3awsLCKCgoAODdd9/lyJEjdO7cGQ8PDzw8PDh06BD33XcfXbt2PW2f3t7eBAQEOLxERERERESc4dIVpejoaPLy8hzaPv/8c7p06QLAiBEjGDRokMPxuLg4RowYwejRo89ZniIiIiIi8tvi0kIpJSWFvn378uSTTzJ8+HB2797NwoULWbhwIQBBQUEEBQU5nOPp6UlISAhXXnmlK1IWEREREZHfAJdeetenTx9WrVrFq6++Svfu3Xn88ceZO3cut99+uyvTEhERERGR3ziXrigBDBkyhCFDhjQ6/uDBgy2XjIiIiIiICC5eURIREREREWmNVCiJiIiIiIhTUlNT6dOnD/7+/lgsFhISEhps0lZeXo7VaiUoKAg/Pz8S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f37xi18AsHr1apKTk4mIiPjpB3IFCkoiIiIiIuIVq9VKXl4e69evJyQkxPXekdlsJigoCLPZzMSJE5k5cybh4eGEhoYydepUkpOT3RZyOHLkCGfPnsXhcFBTU+Na9a5Pnz4EBgZy6tQp/va3v5GSkkJtbS25ubmu5cbbmoKSiIiIiIh45Y9//CMAKSkpbu25ublMmDABgCVLluDn50dGRgZ1dXWkp6ezYsUKt/6TJk1yCz39+/cHoLy83LVQw4cffsisWbMwDIPk5GSKioq4++672+bA/ou+oyQiIiIi4iM3y3eUriet9R0lrXonIiIiIiLiQUFJRERERETEg4KSiIiIiIiIBwUlERERERERDwpKIiIiIiIiHhSUREREREREPCgoiYiIiIiIeFBQEhERERER8aCgJCIiIiIi4kFBSURERERExIOCkoiIiIiIeGXhwoUkJiYSEhJCZGQko0ePpqyszK1PbW0tVquVzp0706lTJzIyMqisrHRt379/P+PHjyc6OpqgoCDi4+NZtmxZk7GKioq46667aN++PbfeeisrV65s68MDFJRERERERMRLNpsNq9XKl19+ybZt22hoaCAtLY1z5865+syYMYMNGzZQUFCAzWbj+PHjjBkzxrV9z549REZGsmrVKg4ePMjs2bN56aWXyMnJcfUpLy9n5MiRDBs2jH379pGdnc2kSZPYsmVLmx+jyTAMo81H8aHTp09jNpuprq4mNDTU19MREREREXGpra2lvLyc2NhYOnTo4OvptNjJkyeJjIzEZrMxZMgQqquriYiIIC8vj7FjxwJw+PBh4uPjKSkpISkpqdk6VquVQ4cOsWPHDgBeeOEFCgsLsdvtrj6PPvooVVVVbN68udkaVzqn3mSDdld99CIiIiIi0qYMw6CmodEnYwcF+GMymVq0b3V1NQDh4eHAxbtFDQ0NpKamuvrExcXRvXv3Kwal6upqVw2AkpIStxoA6enpZGdnt2ie3lBQEhERERG5TtQ0NNLnlbZ/rKw5pQvSCQ70Ph44nU6ys7MZNGgQCQkJADgcDgIDAwkLC3PrGxUVhcPhaLbOzp07WbNmDYWFha42h8NBVFRUkxqnT5+mpqaGoKAgr+d7tRSURERERESkxaxWK3a7nc8//7zFNex2O6NGjWLu3LmkpaW14uxaTkFJREREROQ6ERTgT+mCdJ+N7a2s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EhIAcDgcBAYGNlnNNCoqCofD0WydnTt3smbNGgoLC72eQ1vQO0oiInJN9e7dm6+//rpJ+9dff02vXr28qnX33Xfz6aef8uqrr7J48WKv9o2Pj+fbb7/l22+/dbWVlpZSVVVFnz59AAgLC+POO+8kJyeHgIAA4uLiGDJkCHv37mXjxo1N3k8SEfk5slqt2O128vPzW1zDbrczatQo5s6dS1paWivOruV0R0lERK6pZ555hpycHKZNm8akSZNo3749hYWFrF69mg0bNnhd73//93/ZtGkT999/P+3atbvqFZFSU1O54447ePzxx1m6dCkXLlxgypQpDB06lF/+8peufikpKSxfvpyxY8cCFx8riY+PZ82aNbz99ttez1dE5IoCgi/e2fHV2F7Kyspi48aNFBcX061bN1e7xWKhvr6eqqoqt7tKlZWVWCwWtxqlpaWMGDGCyZMnM2fOnBZPv7XpjpKIiFxTPXv2pLi4mMOHD5OamsrAgQNZu3YtBQUF3HfffS2qOXjwYAoLC5kzZw7Lly+/qn1MJhPr16/nlltuYciQIaSmptKzZ0/WrFnj1m/o0KE0Nja6vYuUkpLSpE1EpFWYTBcff/PFP168n2QYBllZWaxbt44dO3YQGxvrtn3AgAEEBAS4PtkAUFZWxrFjx0hOTna1HTx4kGHDhpGZmckf/vCHn37+WpHJMAzD15MQEREREfk5qq2tpby8nNjYWDp06ODr6Vy1KVOmkJeXx/r16+ndu7er3Ww2ExQUBFx8gmDTpk2sXLmS0NBQpk6dClx8FwkuPm43fPhw0tPTeeONN1w1/P39iYiIcP3et28fAJMmTaJ3794899xzBAYGuh6T9tRa51RBSURERETER27UoGS6zN2n3NxcJkyYAFw8tmeffZbVq1dTV1dHeno6K1ascD16N2/ePObPn9+kRkxMDBUVFVccy7PPf1NQEhERERG5wd2oQel61lrnVO8oiYiIiIiIeFBQEhERERER8aCgJCIiIiIi4kFBSURERERExIOCkoiIiIiIiAcFJREREREREQ8KSiIiIiIiIh4UlERE5IZiGAapqamkp6c32bZixQrCwsL47rvvfDAzERG5mSgoiYjIDcVkMpGbm8uuXbt45513XO3l5eU8//zzLF++nG7durXqmA0NDa1aT0RErn8KSiIicsOJjo5m2bJlzJo1i/Ly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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}